{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Premium_LRS"
      ]
    },
    "alertEmailAddress": {
      "type": "string",
      "metadata": {
        "description": "Alert email address."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
  },
  "variables": {
    "appName": "webrequestor",
    "appStorageName": "[concat('wrq', uniqueString(resourceGroup().id))]",
    "appInsightsName": "[concat(variables('appName'), 'AppInsights')]",
    "appServiceName": "[concat(variables('appName'), uniqueString(resourceGroup().id))]",
    "appServicePlanName": "[concat(variables('appName'), 'AppServicePlan')]",
    "appInsightsExceptionQueryName": "[concat(variables('appName'), 'AppInsightsExceptionQuery')]",
    "appHighUsageAlertName": "[concat(variables('appName'), 'HighUsageAlert')]",
    "appAlertActionGroup": "[concat(variables('appName'), 'ActionGroup')]"
  },
  "resources": [
    {
      "name": "[variables('appAlertActionGroup')]",
      "type": "microsoft.insights/actionGroups",
      "location": "Global",
      "apiVersion": "2018-09-01",
      "properties": {
        "groupShortName": "funcAG",
        "enabled": true,
        "emailReceivers": [
          {
            "name": "notify owners by email",
            "emailAddress": "[parameters('alertEmailAddress')]"
          }
        ],

        "smsReceivers": [],
        "webhookReceivers": [],
        "itsmReceivers": [],
        "azureAppPushReceivers": [
          {
            "name": "notify owners_-AzureAppAction-",
            "emailAddress": "[parameters('alertEmailAddress')]"
          }
        ],
        "automationRunbookReceivers": [],
        "voiceReceivers": [],
        "logicAppReceivers": [],
        "azureFunctionReceivers": []
      },
      "dependsOn": []
    },
    {
      "name": "[variables('appInsightsExceptionQueryName')]",
      "type": "microsoft.insights/scheduledqueryrules",
      "location": "[parameters('location')]",
      "apiVersion": "2018-04-16",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Insights/components/', variables('appInsightsName'))]": "Resource"
      },
      "scale": null,
      "properties": {
        "description": "Scheduled query to find exceptions occurred in the app in last 5 minutes.",
        "enabled": "true",
        "source": {
          "query": "exceptions",
          "authorizedResources": [],
          "dataSourceId": "[resourceId('microsoft.insights/components', variables('appInsightsName'))]",
          "queryType": "ResultCount"
        },
        "schedule": {
          "frequencyInMinutes": 5,
          "timeWindowInMinutes": 5
        },
        "action": {
          "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
          "severity": 2,
          "trigger": {
            "thresholdOperator": "GreaterThan",
            "threshold": 0
          },
          "aznsAction": {
            "actionGroup": [
              "[resourceId('microsoft.insights/actionGroups', variables('appAlertActionGroup'))]"
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('microsoft.insights/components', variables('appInsightsName'))]"
      ]
    },
    {
      "name": "[variables('appHighUsageAlertName')]",
      "type": "microsoft.insights/metricalerts",
      "location": "global",
      "apiVersion": "2018-03-01",
      "properties": {
        "description": "High usage of our Functions API.",
        "enabled": true,
        "severity": 4,
        "scopes": [ "[resourceId('Microsoft.Web/sites', variables('appServiceName'))]" ],
        "evaluationFrequency": "PT1M",
        "windowSize": "PT1M",
        "criteria": {
          "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
          "allOf": [
            {
              "name": "Function usage",
              "metricName": "FunctionExecutionCount",
              "dimensions": [],
              "operator": "GreaterThan",
              "threshold": "10",
              "timeAggregation": "Total"
            }
          ]
        },
        "actions": [
          {
            "actionGroupId": "[resourceId('microsoft.insights/actionGroups', variables('appAlertActionGroup'))]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('appServiceName'))]"
      ]
    },
    {
      "name": "[variables('appServicePlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "location": "[parameters('location')]",
      "apiVersion": "2015-04-01",
      "properties": {
        "computeMode": "Dynamic",
        "sku": "Dynamic"
      }
    },
    {
      "name": "[variables('appStorageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[parameters('location')]",
      "apiVersion": "2018-02-01",
      "sku": {
        "name": "[parameters('storageType')]"
      },
      "dependsOn": [],
      "tags": {},
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "keySource": "Microsoft.Storage",
          "services": {
            "blob": {
              "enabled": true
            },
            "file": {
              "enabled": true
            }
          }
        }
      }
    },
    {
      "name": "[variables('appInsightsName')]",
      "type": "Microsoft.Insights/components",
      "location": "[parameters('location')]",
      "apiVersion": "2015-05-01",
      "dependsOn": [],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('appServiceName'))]": "Resource"
      },
      "properties": {
        "applicationId": "[resourceId('Microsoft.Web/sites', variables('appServiceName'))]",
        "Request_Source": "IbizaWebAppExtensionCreate"
      }
    },
    {
      "name": "[variables('appServiceName')]",
      "type": "Microsoft.Web/sites",
      "kind": "functionapp",
      "location": "[parameters('location')]",
      "apiVersion": "2016-03-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('appStorageName'))]",
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('appStorageName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('appStorageName')), '2015-05-01-preview').key1)]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('appStorageName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('appStorageName')), '2015-05-01-preview').key1)]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~2"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "1"
            }
          ]
        },
        "clientAffinityEnabled": false,
        "reserved": false
      }
    }
  ],
  "outputs": {
    "webAppName": {
      "type": "string",
      "value": "[variables('appServiceName')]"
    },
    "webAppUri": {
      "type": "string",
      "value": "[concat('http://',reference(resourceId('Microsoft.Web/sites', variables('appServiceName'))).hostNames[0])]"
    }
  }
}
